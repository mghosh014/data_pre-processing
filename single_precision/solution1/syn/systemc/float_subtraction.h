// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _float_subtraction_HH_
#define _float_subtraction_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "float_subtractionbkb.h"
#include "float_subtractioncud.h"
#include "float_subtractiondEe.h"
#include "float_subtractioneOg.h"

namespace ap_rtl {

struct float_subtraction : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > a_V_dout;
    sc_in< sc_logic > a_V_empty_n;
    sc_out< sc_logic > a_V_read;
    sc_in< sc_lv<16> > b_V_dout;
    sc_in< sc_logic > b_V_empty_n;
    sc_out< sc_logic > b_V_read;
    sc_out< sc_lv<16> > c_V_din;
    sc_in< sc_logic > c_V_full_n;
    sc_out< sc_logic > c_V_write;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    float_subtraction(sc_module_name name);
    SC_HAS_PROCESS(float_subtraction);

    ~float_subtraction();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    float_subtractionbkb<1,4,32,32,32>* float_subtractionbkb_U1;
    float_subtractioncud<1,3,32,32,32>* float_subtractioncud_U2;
    float_subtractiondEe<1,4,32,32>* float_subtractiondEe_U3;
    float_subtractiondEe<1,4,32,32>* float_subtractiondEe_U4;
    float_subtractioneOg<1,2,32,16>* float_subtractioneOg_U5;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > a_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_44_p3;
    sc_signal< sc_lv<1> > tmp_1_nbreadreq_fu_52_p3;
    sc_signal< sc_logic > b_V_blk_n;
    sc_signal< sc_logic > c_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter13;
    sc_signal< sc_lv<1> > tmp_1_reg_109;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter12_reg;
    sc_signal< bool > ap_predicate_op29_read_state2;
    sc_signal< bool > ap_predicate_op30_read_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state15_pp0_stage0_iter13;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter2_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter3_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter4_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter5_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter6_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter7_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter8_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter9_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter10_reg;
    sc_signal< sc_lv<1> > tmp_1_reg_109_pp0_iter11_reg;
    sc_signal< sc_lv<16> > tmp_3_reg_113;
    sc_signal< sc_lv<16> > tmp_4_reg_118;
    sc_signal< sc_lv<32> > grp_fu_88_p1;
    sc_signal< sc_lv<32> > d_reg_133;
    sc_signal< sc_lv<32> > grp_fu_91_p1;
    sc_signal< sc_lv<32> > e_reg_138;
    sc_signal< sc_lv<32> > grp_fu_79_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_143;
    sc_signal< sc_lv<32> > grp_fu_83_p2;
    sc_signal< sc_lv<32> > f_reg_148;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_predicate_tran2to16_state2;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter12;
    sc_signal< sc_lv<16> > grp_fu_94_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > grp_fu_88_p0;
    sc_signal< sc_lv<32> > grp_fu_91_p0;
    sc_signal< sc_logic > grp_fu_79_ce;
    sc_signal< sc_logic > grp_fu_83_ce;
    sc_signal< sc_logic > grp_fu_88_ce;
    sc_signal< sc_logic > grp_fu_91_ce;
    sc_signal< sc_logic > grp_fu_94_ce;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_391A209B;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_V_blk_n();
    void thread_a_V_read();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state16();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state13_pp0_stage0_iter11();
    void thread_ap_block_state14_pp0_stage0_iter12();
    void thread_ap_block_state15_pp0_stage0_iter13();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_predicate_op29_read_state2();
    void thread_ap_predicate_op30_read_state2();
    void thread_ap_predicate_tran2to16_state2();
    void thread_ap_ready();
    void thread_b_V_blk_n();
    void thread_b_V_read();
    void thread_c_V_blk_n();
    void thread_c_V_din();
    void thread_c_V_write();
    void thread_grp_fu_79_ce();
    void thread_grp_fu_83_ce();
    void thread_grp_fu_88_ce();
    void thread_grp_fu_88_p0();
    void thread_grp_fu_91_ce();
    void thread_grp_fu_91_p0();
    void thread_grp_fu_94_ce();
    void thread_tmp_1_nbreadreq_fu_52_p3();
    void thread_tmp_nbreadreq_fu_44_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
